[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "test-a-ble"
version = "0.1.0"
description = "Framework for testing BLE IoT devices"
authors = [
    {name = "Nick Brook", email = "nick@nrbtech.io"}
]
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Hardware",
]
keywords = ["bluetooth", "ble", "iot", "testing", "automation"]
dependencies = [
    "bleak>=0.22.3",
    "rich>=13.9.4",
    "packaging",
    "prompt_toolkit>=3.0.0",
]

[project.scripts]
test-a-ble = "test_a_ble.cli:main"

[dependency-groups]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.22.0",
    "tox>=4.24.2",
    "tox-uv>=1.25.0",
]
lint = [
    "ruff>=0.3.0",
]
type = [
    "mypy>=1.15.0",
]
check = [
    {include-group = "test"},
    {include-group = "lint"},
    {include-group = "type"},
]
security = [
    "bandit>=1.8.3",
    "safety>=3.3.1",
]
docs = [
    "sphinx>=8.2.3",
    "sphinx-rtd-theme>=3.0.2",
    "myst-parser>=4.0.1",
]
dev = [
    "pre-commit>=4.1.0",
    {include-group = "check"},
    {include-group = "security"},
    {include-group = "docs"},
]

# Formatting and linting

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]
ignore = [
    "T201", # ignore print usage
    "TRY003", # ignore long messages when raising exceptions
    "COM812", # ignore trailing commas as it conflicts with the ruff formatter

    # for now, ignore complexity warnings
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0915",

]

# Ignore assert usage in test files
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # ignore assert usage
    "ARG001", # ignore unused arguments
    "ARG002", # ignore unused arguments
    "PLR2004", # ignore numerical comparisons
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-single-line = false
known-first-party = ["test_a_ble"]
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
files = ["test_a_ble", "docs", "tests"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
asyncio_default_fixture_loop_scope = "function"
# Exclude specific classes from collection to avoid PytestCollectionWarning
python_classes = "Test[A-Z][a-zA-Z0-9]*(?<!Context|Status|Exception|Failure|Skip)"
norecursedirs = ["examples","test_discovery_test_package"]

[tool.bandit]
exclude_dirs = [".tox", ".venv"]
skips = ["B101", "B404", "B607"]

# Tox

[tool.tox]
min_version = "4.0"
env_list = ["py312", "py313", "lint", "type"]
isolated_build = true
skip_missing_interpreters = false

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
description = "Run test under {base_python}"
dependency_groups = ["test"]
commands = [["make", "test"]]
allowlist_externals = ["make"]

[tool.tox.env.lint]
description = "format and lint code"
dependency_groups = ["lint"]
commands = [["make", "lint"]]

[tool.tox.env.format]
description = "format code"
dependency_groups = ["lint"]
commands = [["make", "format"]]

[tool.tox.env.type]
description = "type check code"
dependency_groups = ["type"]
commands = [["make", "typecheck"]]
